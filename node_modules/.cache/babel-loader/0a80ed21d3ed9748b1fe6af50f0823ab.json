{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/joewlos/Documents/joe_web_react/src/components/StackedBar.js\",\n    _s = $RefreshSig$();\n\n// React\nimport React from 'react'; // React Plotly\n\nimport Plot from 'react-plotly.js'; // Resize observer\n\nimport useResizeObserver from 'use-resize-observer'; // Create a sunburst chart with labels\n\nfunction StackedBar(props) {\n  _s();\n\n  const data = props.data; // Get the resizing info\n\n  const {\n    ref,\n    width = 1,\n    height = 1\n  } = useResizeObserver(); // Show a loading message if the data is not available\n\n  const loading = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 21\n  }, this);\n\n  if (!data) {\n    return loading;\n  }\n\n  ; // Return the chart\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(Plot, {\n      data: data,\n      config: {\n        displayModeBar: false\n      },\n      layout: {\n        width: width,\n        height: height,\n        margin: {\n          l: 55,\n          r: 0,\n          b: 20,\n          t: 0\n        },\n        paper_bgcolor: 'rgba(0, 0, 0, 0)',\n        plot_bgcolor: 'rgba(0, 0, 0, 0)',\n        barmode: 'stack',\n        font: {\n          family: 'Raleway, sans-serif'\n        },\n        xaxis: {\n          tickfont: {\n            size: 16\n          }\n        },\n        yaxis: {\n          tickfont: {\n            size: 16\n          }\n        },\n        legend: {\n          font: {\n            size: 16\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StackedBar, \"T0Sxn33gjE7+BfJmWu67U7vYF/A=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = StackedBar;\n;\nexport default StackedBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"StackedBar\");","map":{"version":3,"sources":["/Users/joewlos/Documents/joe_web_react/src/components/StackedBar.js"],"names":["React","Plot","useResizeObserver","StackedBar","props","data","ref","width","height","loading","displayModeBar","margin","l","r","b","t","paper_bgcolor","plot_bgcolor","barmode","font","family","xaxis","tickfont","size","yaxis","legend"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,iBAAjB,C,CAEA;;AACA,OAAOC,iBAAP,MAA8B,qBAA9B,C,CAEA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACvB,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB,CADuB,CAGvB;;AACA,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAK,GAAG,CAAf;AAAkBC,IAAAA,MAAM,GAAG;AAA3B,MAAiCN,iBAAiB,EAAxD,CAJuB,CAMvB;;AACA,QAAMO,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhB;;AACA,MAAI,CAACJ,IAAL,EAAW;AACP,WAAQI,OAAR;AACH;;AAAA,GAVsB,CAYvB;;AACA,sBACI;AAAK,IAAA,KAAK,EAAG;AAAEF,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAAb;AAAgD,IAAA,GAAG,EAAGF,GAAtD;AAAA,2BACI,QAAC,IAAD;AACI,MAAA,IAAI,EAAGD,IADX;AAEI,MAAA,MAAM,EAAG;AAACK,QAAAA,cAAc,EAAE;AAAjB,OAFb;AAGI,MAAA,MAAM,EAAG;AACLH,QAAAA,KAAK,EAAEA,KADF;AAELC,QAAAA,MAAM,EAAEA,MAFH;AAGLG,QAAAA,MAAM,EAAE;AAAEC,UAAAA,CAAC,EAAE,EAAL;AAASC,UAAAA,CAAC,EAAE,CAAZ;AAAeC,UAAAA,CAAC,EAAE,EAAlB;AAAsBC,UAAAA,CAAC,EAAE;AAAzB,SAHH;AAILC,QAAAA,aAAa,EAAE,kBAJV;AAKLC,QAAAA,YAAY,EAAE,kBALT;AAMLC,QAAAA,OAAO,EAAE,OANJ;AAOLC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAPD;AAQLC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAAZ,SARF;AASLC,QAAAA,KAAK,EAAE;AAAEF,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAAZ,SATF;AAULE,QAAAA,MAAM,EAAE;AAAEN,UAAAA,IAAI,EAAE;AAAEI,YAAAA,IAAI,EAAE;AAAR;AAAR;AAVH;AAHb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GAjCQpB,U;UAIkCD,iB;;;KAJlCC,U;AAiCR;AAED,eAAeA,UAAf","sourcesContent":["// React\nimport React from 'react';\n\n// React Plotly\nimport Plot from 'react-plotly.js';\n\n// Resize observer\nimport useResizeObserver from 'use-resize-observer';\n\n// Create a sunburst chart with labels\nfunction StackedBar(props) {\n    const data = props.data;\n\n    // Get the resizing info\n    const { ref, width = 1, height = 1 } = useResizeObserver();\n\n    // Show a loading message if the data is not available\n    const loading = <p>Loading...</p>\n    if (!data) {\n        return (loading);\n    };\n\n    // Return the chart\n    return (\n        <div style={ { width: '100%', height: '100%'} } ref={ ref }>\n            <Plot\n                data={ data }\n                config={ {displayModeBar: false} }\n                layout={ {\n                    width: width, \n                    height: height, \n                    margin: { l: 55, r: 0, b: 20, t: 0},\n                    paper_bgcolor: 'rgba(0, 0, 0, 0)',\n                    plot_bgcolor: 'rgba(0, 0, 0, 0)',\n                    barmode: 'stack',\n                    font: { family: 'Raleway, sans-serif' },\n                    xaxis: { tickfont: { size: 16 } },\n                    yaxis: { tickfont: { size: 16 } },\n                    legend: { font: { size: 16 } }\n                } }\n            />\n        </div>\n    );\n};\n\nexport default StackedBar;"]},"metadata":{},"sourceType":"module"}